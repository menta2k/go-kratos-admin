// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/roleposition"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RolePositionCreate is the builder for creating a RolePosition entity.
type RolePositionCreate struct {
	config
	mutation *RolePositionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (_c *RolePositionCreate) SetCreateTime(v time.Time) *RolePositionCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *RolePositionCreate) SetNillableCreateTime(v *time.Time) *RolePositionCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *RolePositionCreate) SetUpdateTime(v time.Time) *RolePositionCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *RolePositionCreate) SetNillableUpdateTime(v *time.Time) *RolePositionCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *RolePositionCreate) SetDeleteTime(v time.Time) *RolePositionCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *RolePositionCreate) SetNillableDeleteTime(v *time.Time) *RolePositionCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *RolePositionCreate) SetCreateBy(v uint32) *RolePositionCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *RolePositionCreate) SetNillableCreateBy(v *uint32) *RolePositionCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetRoleID sets the "role_id" field.
func (_c *RolePositionCreate) SetRoleID(v uint32) *RolePositionCreate {
	_c.mutation.SetRoleID(v)
	return _c
}

// SetPositionID sets the "position_id" field.
func (_c *RolePositionCreate) SetPositionID(v uint32) *RolePositionCreate {
	_c.mutation.SetPositionID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *RolePositionCreate) SetID(v uint32) *RolePositionCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the RolePositionMutation object of the builder.
func (_c *RolePositionCreate) Mutation() *RolePositionMutation {
	return _c.mutation
}

// Save creates the RolePosition in the database.
func (_c *RolePositionCreate) Save(ctx context.Context) (*RolePosition, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RolePositionCreate) SaveX(ctx context.Context) *RolePosition {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RolePositionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RolePositionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RolePositionCreate) check() error {
	if _, ok := _c.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "RolePosition.role_id"`)}
	}
	if _, ok := _c.mutation.PositionID(); !ok {
		return &ValidationError{Name: "position_id", err: errors.New(`ent: missing required field "RolePosition.position_id"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := roleposition.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "RolePosition.id": %w`, err)}
		}
	}
	return nil
}

func (_c *RolePositionCreate) sqlSave(ctx context.Context) (*RolePosition, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RolePositionCreate) createSpec() (*RolePosition, *sqlgraph.CreateSpec) {
	var (
		_node = &RolePosition{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(roleposition.Table, sqlgraph.NewFieldSpec(roleposition.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(roleposition.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(roleposition.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(roleposition.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(roleposition.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.RoleID(); ok {
		_spec.SetField(roleposition.FieldRoleID, field.TypeUint32, value)
		_node.RoleID = &value
	}
	if value, ok := _c.mutation.PositionID(); ok {
		_spec.SetField(roleposition.FieldPositionID, field.TypeUint32, value)
		_node.PositionID = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RolePosition.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RolePositionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *RolePositionCreate) OnConflict(opts ...sql.ConflictOption) *RolePositionUpsertOne {
	_c.conflict = opts
	return &RolePositionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RolePosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RolePositionCreate) OnConflictColumns(columns ...string) *RolePositionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RolePositionUpsertOne{
		create: _c,
	}
}

type (
	// RolePositionUpsertOne is the builder for "upsert"-ing
	//  one RolePosition node.
	RolePositionUpsertOne struct {
		create *RolePositionCreate
	}

	// RolePositionUpsert is the "OnConflict" setter.
	RolePositionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *RolePositionUpsert) SetUpdateTime(v time.Time) *RolePositionUpsert {
	u.Set(roleposition.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RolePositionUpsert) UpdateUpdateTime() *RolePositionUpsert {
	u.SetExcluded(roleposition.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RolePositionUpsert) ClearUpdateTime() *RolePositionUpsert {
	u.SetNull(roleposition.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *RolePositionUpsert) SetDeleteTime(v time.Time) *RolePositionUpsert {
	u.Set(roleposition.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RolePositionUpsert) UpdateDeleteTime() *RolePositionUpsert {
	u.SetExcluded(roleposition.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RolePositionUpsert) ClearDeleteTime() *RolePositionUpsert {
	u.SetNull(roleposition.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *RolePositionUpsert) SetCreateBy(v uint32) *RolePositionUpsert {
	u.Set(roleposition.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *RolePositionUpsert) UpdateCreateBy() *RolePositionUpsert {
	u.SetExcluded(roleposition.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *RolePositionUpsert) AddCreateBy(v uint32) *RolePositionUpsert {
	u.Add(roleposition.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *RolePositionUpsert) ClearCreateBy() *RolePositionUpsert {
	u.SetNull(roleposition.FieldCreateBy)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *RolePositionUpsert) SetRoleID(v uint32) *RolePositionUpsert {
	u.Set(roleposition.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *RolePositionUpsert) UpdateRoleID() *RolePositionUpsert {
	u.SetExcluded(roleposition.FieldRoleID)
	return u
}

// AddRoleID adds v to the "role_id" field.
func (u *RolePositionUpsert) AddRoleID(v uint32) *RolePositionUpsert {
	u.Add(roleposition.FieldRoleID, v)
	return u
}

// SetPositionID sets the "position_id" field.
func (u *RolePositionUpsert) SetPositionID(v uint32) *RolePositionUpsert {
	u.Set(roleposition.FieldPositionID, v)
	return u
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *RolePositionUpsert) UpdatePositionID() *RolePositionUpsert {
	u.SetExcluded(roleposition.FieldPositionID)
	return u
}

// AddPositionID adds v to the "position_id" field.
func (u *RolePositionUpsert) AddPositionID(v uint32) *RolePositionUpsert {
	u.Add(roleposition.FieldPositionID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RolePosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(roleposition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RolePositionUpsertOne) UpdateNewValues() *RolePositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(roleposition.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(roleposition.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RolePosition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RolePositionUpsertOne) Ignore() *RolePositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RolePositionUpsertOne) DoNothing() *RolePositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RolePositionCreate.OnConflict
// documentation for more info.
func (u *RolePositionUpsertOne) Update(set func(*RolePositionUpsert)) *RolePositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RolePositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RolePositionUpsertOne) SetUpdateTime(v time.Time) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RolePositionUpsertOne) UpdateUpdateTime() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RolePositionUpsertOne) ClearUpdateTime() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *RolePositionUpsertOne) SetDeleteTime(v time.Time) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RolePositionUpsertOne) UpdateDeleteTime() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RolePositionUpsertOne) ClearDeleteTime() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *RolePositionUpsertOne) SetCreateBy(v uint32) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *RolePositionUpsertOne) AddCreateBy(v uint32) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *RolePositionUpsertOne) UpdateCreateBy() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *RolePositionUpsertOne) ClearCreateBy() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.ClearCreateBy()
	})
}

// SetRoleID sets the "role_id" field.
func (u *RolePositionUpsertOne) SetRoleID(v uint32) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetRoleID(v)
	})
}

// AddRoleID adds v to the "role_id" field.
func (u *RolePositionUpsertOne) AddRoleID(v uint32) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.AddRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *RolePositionUpsertOne) UpdateRoleID() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateRoleID()
	})
}

// SetPositionID sets the "position_id" field.
func (u *RolePositionUpsertOne) SetPositionID(v uint32) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetPositionID(v)
	})
}

// AddPositionID adds v to the "position_id" field.
func (u *RolePositionUpsertOne) AddPositionID(v uint32) *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.AddPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *RolePositionUpsertOne) UpdatePositionID() *RolePositionUpsertOne {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdatePositionID()
	})
}

// Exec executes the query.
func (u *RolePositionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RolePositionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RolePositionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RolePositionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RolePositionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RolePositionCreateBulk is the builder for creating many RolePosition entities in bulk.
type RolePositionCreateBulk struct {
	config
	err      error
	builders []*RolePositionCreate
	conflict []sql.ConflictOption
}

// Save creates the RolePosition entities in the database.
func (_c *RolePositionCreateBulk) Save(ctx context.Context) ([]*RolePosition, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*RolePosition, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RolePositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RolePositionCreateBulk) SaveX(ctx context.Context) []*RolePosition {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RolePositionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RolePositionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RolePosition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RolePositionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *RolePositionCreateBulk) OnConflict(opts ...sql.ConflictOption) *RolePositionUpsertBulk {
	_c.conflict = opts
	return &RolePositionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RolePosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RolePositionCreateBulk) OnConflictColumns(columns ...string) *RolePositionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RolePositionUpsertBulk{
		create: _c,
	}
}

// RolePositionUpsertBulk is the builder for "upsert"-ing
// a bulk of RolePosition nodes.
type RolePositionUpsertBulk struct {
	create *RolePositionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RolePosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(roleposition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RolePositionUpsertBulk) UpdateNewValues() *RolePositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(roleposition.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(roleposition.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RolePosition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RolePositionUpsertBulk) Ignore() *RolePositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RolePositionUpsertBulk) DoNothing() *RolePositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RolePositionCreateBulk.OnConflict
// documentation for more info.
func (u *RolePositionUpsertBulk) Update(set func(*RolePositionUpsert)) *RolePositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RolePositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RolePositionUpsertBulk) SetUpdateTime(v time.Time) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RolePositionUpsertBulk) UpdateUpdateTime() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RolePositionUpsertBulk) ClearUpdateTime() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *RolePositionUpsertBulk) SetDeleteTime(v time.Time) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RolePositionUpsertBulk) UpdateDeleteTime() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RolePositionUpsertBulk) ClearDeleteTime() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *RolePositionUpsertBulk) SetCreateBy(v uint32) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *RolePositionUpsertBulk) AddCreateBy(v uint32) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *RolePositionUpsertBulk) UpdateCreateBy() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *RolePositionUpsertBulk) ClearCreateBy() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.ClearCreateBy()
	})
}

// SetRoleID sets the "role_id" field.
func (u *RolePositionUpsertBulk) SetRoleID(v uint32) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetRoleID(v)
	})
}

// AddRoleID adds v to the "role_id" field.
func (u *RolePositionUpsertBulk) AddRoleID(v uint32) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.AddRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *RolePositionUpsertBulk) UpdateRoleID() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdateRoleID()
	})
}

// SetPositionID sets the "position_id" field.
func (u *RolePositionUpsertBulk) SetPositionID(v uint32) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.SetPositionID(v)
	})
}

// AddPositionID adds v to the "position_id" field.
func (u *RolePositionUpsertBulk) AddPositionID(v uint32) *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.AddPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *RolePositionUpsertBulk) UpdatePositionID() *RolePositionUpsertBulk {
	return u.Update(func(s *RolePositionUpsert) {
		s.UpdatePositionID()
	})
}

// Exec executes the query.
func (u *RolePositionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RolePositionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RolePositionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RolePositionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
