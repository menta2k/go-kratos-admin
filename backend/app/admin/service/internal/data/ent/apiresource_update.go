// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/apiresource"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiResourceUpdate is the builder for updating ApiResource entities.
type ApiResourceUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiResourceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiResourceUpdate builder.
func (_u *ApiResourceUpdate) Where(ps ...predicate.ApiResource) *ApiResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ApiResourceUpdate) SetUpdateTime(v time.Time) *ApiResourceUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableUpdateTime(v *time.Time) *ApiResourceUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *ApiResourceUpdate) ClearUpdateTime() *ApiResourceUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ApiResourceUpdate) SetDeleteTime(v time.Time) *ApiResourceUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableDeleteTime(v *time.Time) *ApiResourceUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ApiResourceUpdate) ClearDeleteTime() *ApiResourceUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *ApiResourceUpdate) SetCreateBy(v uint32) *ApiResourceUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableCreateBy(v *uint32) *ApiResourceUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ApiResourceUpdate) AddCreateBy(v int32) *ApiResourceUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ApiResourceUpdate) ClearCreateBy() *ApiResourceUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ApiResourceUpdate) SetUpdateBy(v uint32) *ApiResourceUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableUpdateBy(v *uint32) *ApiResourceUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ApiResourceUpdate) AddUpdateBy(v int32) *ApiResourceUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ApiResourceUpdate) ClearUpdateBy() *ApiResourceUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ApiResourceUpdate) SetDescription(v string) *ApiResourceUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableDescription(v *string) *ApiResourceUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ApiResourceUpdate) ClearDescription() *ApiResourceUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetModule sets the "module" field.
func (_u *ApiResourceUpdate) SetModule(v string) *ApiResourceUpdate {
	_u.mutation.SetModule(v)
	return _u
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableModule(v *string) *ApiResourceUpdate {
	if v != nil {
		_u.SetModule(*v)
	}
	return _u
}

// ClearModule clears the value of the "module" field.
func (_u *ApiResourceUpdate) ClearModule() *ApiResourceUpdate {
	_u.mutation.ClearModule()
	return _u
}

// SetModuleDescription sets the "module_description" field.
func (_u *ApiResourceUpdate) SetModuleDescription(v string) *ApiResourceUpdate {
	_u.mutation.SetModuleDescription(v)
	return _u
}

// SetNillableModuleDescription sets the "module_description" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableModuleDescription(v *string) *ApiResourceUpdate {
	if v != nil {
		_u.SetModuleDescription(*v)
	}
	return _u
}

// ClearModuleDescription clears the value of the "module_description" field.
func (_u *ApiResourceUpdate) ClearModuleDescription() *ApiResourceUpdate {
	_u.mutation.ClearModuleDescription()
	return _u
}

// SetOperation sets the "operation" field.
func (_u *ApiResourceUpdate) SetOperation(v string) *ApiResourceUpdate {
	_u.mutation.SetOperation(v)
	return _u
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableOperation(v *string) *ApiResourceUpdate {
	if v != nil {
		_u.SetOperation(*v)
	}
	return _u
}

// ClearOperation clears the value of the "operation" field.
func (_u *ApiResourceUpdate) ClearOperation() *ApiResourceUpdate {
	_u.mutation.ClearOperation()
	return _u
}

// SetPath sets the "path" field.
func (_u *ApiResourceUpdate) SetPath(v string) *ApiResourceUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillablePath(v *string) *ApiResourceUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *ApiResourceUpdate) ClearPath() *ApiResourceUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetMethod sets the "method" field.
func (_u *ApiResourceUpdate) SetMethod(v string) *ApiResourceUpdate {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableMethod(v *string) *ApiResourceUpdate {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *ApiResourceUpdate) ClearMethod() *ApiResourceUpdate {
	_u.mutation.ClearMethod()
	return _u
}

// SetScope sets the "scope" field.
func (_u *ApiResourceUpdate) SetScope(v apiresource.Scope) *ApiResourceUpdate {
	_u.mutation.SetScope(v)
	return _u
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_u *ApiResourceUpdate) SetNillableScope(v *apiresource.Scope) *ApiResourceUpdate {
	if v != nil {
		_u.SetScope(*v)
	}
	return _u
}

// ClearScope clears the value of the "scope" field.
func (_u *ApiResourceUpdate) ClearScope() *ApiResourceUpdate {
	_u.mutation.ClearScope()
	return _u
}

// Mutation returns the ApiResourceMutation object of the builder.
func (_u *ApiResourceUpdate) Mutation() *ApiResourceMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ApiResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApiResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ApiResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApiResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ApiResourceUpdate) check() error {
	if v, ok := _u.mutation.Scope(); ok {
		if err := apiresource.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "ApiResource.scope": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ApiResourceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiResourceUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ApiResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiresource.Table, apiresource.Columns, sqlgraph.NewFieldSpec(apiresource.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(apiresource.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(apiresource.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(apiresource.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(apiresource.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(apiresource.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(apiresource.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(apiresource.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(apiresource.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(apiresource.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(apiresource.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(apiresource.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(apiresource.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(apiresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Module(); ok {
		_spec.SetField(apiresource.FieldModule, field.TypeString, value)
	}
	if _u.mutation.ModuleCleared() {
		_spec.ClearField(apiresource.FieldModule, field.TypeString)
	}
	if value, ok := _u.mutation.ModuleDescription(); ok {
		_spec.SetField(apiresource.FieldModuleDescription, field.TypeString, value)
	}
	if _u.mutation.ModuleDescriptionCleared() {
		_spec.ClearField(apiresource.FieldModuleDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Operation(); ok {
		_spec.SetField(apiresource.FieldOperation, field.TypeString, value)
	}
	if _u.mutation.OperationCleared() {
		_spec.ClearField(apiresource.FieldOperation, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(apiresource.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(apiresource.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(apiresource.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(apiresource.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(apiresource.FieldScope, field.TypeEnum, value)
	}
	if _u.mutation.ScopeCleared() {
		_spec.ClearField(apiresource.FieldScope, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ApiResourceUpdateOne is the builder for updating a single ApiResource entity.
type ApiResourceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiResourceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *ApiResourceUpdateOne) SetUpdateTime(v time.Time) *ApiResourceUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableUpdateTime(v *time.Time) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *ApiResourceUpdateOne) ClearUpdateTime() *ApiResourceUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ApiResourceUpdateOne) SetDeleteTime(v time.Time) *ApiResourceUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableDeleteTime(v *time.Time) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ApiResourceUpdateOne) ClearDeleteTime() *ApiResourceUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *ApiResourceUpdateOne) SetCreateBy(v uint32) *ApiResourceUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableCreateBy(v *uint32) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ApiResourceUpdateOne) AddCreateBy(v int32) *ApiResourceUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ApiResourceUpdateOne) ClearCreateBy() *ApiResourceUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ApiResourceUpdateOne) SetUpdateBy(v uint32) *ApiResourceUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableUpdateBy(v *uint32) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ApiResourceUpdateOne) AddUpdateBy(v int32) *ApiResourceUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ApiResourceUpdateOne) ClearUpdateBy() *ApiResourceUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ApiResourceUpdateOne) SetDescription(v string) *ApiResourceUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableDescription(v *string) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ApiResourceUpdateOne) ClearDescription() *ApiResourceUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetModule sets the "module" field.
func (_u *ApiResourceUpdateOne) SetModule(v string) *ApiResourceUpdateOne {
	_u.mutation.SetModule(v)
	return _u
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableModule(v *string) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetModule(*v)
	}
	return _u
}

// ClearModule clears the value of the "module" field.
func (_u *ApiResourceUpdateOne) ClearModule() *ApiResourceUpdateOne {
	_u.mutation.ClearModule()
	return _u
}

// SetModuleDescription sets the "module_description" field.
func (_u *ApiResourceUpdateOne) SetModuleDescription(v string) *ApiResourceUpdateOne {
	_u.mutation.SetModuleDescription(v)
	return _u
}

// SetNillableModuleDescription sets the "module_description" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableModuleDescription(v *string) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetModuleDescription(*v)
	}
	return _u
}

// ClearModuleDescription clears the value of the "module_description" field.
func (_u *ApiResourceUpdateOne) ClearModuleDescription() *ApiResourceUpdateOne {
	_u.mutation.ClearModuleDescription()
	return _u
}

// SetOperation sets the "operation" field.
func (_u *ApiResourceUpdateOne) SetOperation(v string) *ApiResourceUpdateOne {
	_u.mutation.SetOperation(v)
	return _u
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableOperation(v *string) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetOperation(*v)
	}
	return _u
}

// ClearOperation clears the value of the "operation" field.
func (_u *ApiResourceUpdateOne) ClearOperation() *ApiResourceUpdateOne {
	_u.mutation.ClearOperation()
	return _u
}

// SetPath sets the "path" field.
func (_u *ApiResourceUpdateOne) SetPath(v string) *ApiResourceUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillablePath(v *string) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *ApiResourceUpdateOne) ClearPath() *ApiResourceUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetMethod sets the "method" field.
func (_u *ApiResourceUpdateOne) SetMethod(v string) *ApiResourceUpdateOne {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableMethod(v *string) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *ApiResourceUpdateOne) ClearMethod() *ApiResourceUpdateOne {
	_u.mutation.ClearMethod()
	return _u
}

// SetScope sets the "scope" field.
func (_u *ApiResourceUpdateOne) SetScope(v apiresource.Scope) *ApiResourceUpdateOne {
	_u.mutation.SetScope(v)
	return _u
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_u *ApiResourceUpdateOne) SetNillableScope(v *apiresource.Scope) *ApiResourceUpdateOne {
	if v != nil {
		_u.SetScope(*v)
	}
	return _u
}

// ClearScope clears the value of the "scope" field.
func (_u *ApiResourceUpdateOne) ClearScope() *ApiResourceUpdateOne {
	_u.mutation.ClearScope()
	return _u
}

// Mutation returns the ApiResourceMutation object of the builder.
func (_u *ApiResourceUpdateOne) Mutation() *ApiResourceMutation {
	return _u.mutation
}

// Where appends a list predicates to the ApiResourceUpdate builder.
func (_u *ApiResourceUpdateOne) Where(ps ...predicate.ApiResource) *ApiResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ApiResourceUpdateOne) Select(field string, fields ...string) *ApiResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ApiResource entity.
func (_u *ApiResourceUpdateOne) Save(ctx context.Context) (*ApiResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApiResourceUpdateOne) SaveX(ctx context.Context) *ApiResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ApiResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApiResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ApiResourceUpdateOne) check() error {
	if v, ok := _u.mutation.Scope(); ok {
		if err := apiresource.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "ApiResource.scope": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ApiResourceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiResourceUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ApiResourceUpdateOne) sqlSave(ctx context.Context) (_node *ApiResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiresource.Table, apiresource.Columns, sqlgraph.NewFieldSpec(apiresource.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apiresource.FieldID)
		for _, f := range fields {
			if !apiresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apiresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(apiresource.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(apiresource.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(apiresource.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(apiresource.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(apiresource.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(apiresource.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(apiresource.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(apiresource.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(apiresource.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(apiresource.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(apiresource.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(apiresource.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(apiresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Module(); ok {
		_spec.SetField(apiresource.FieldModule, field.TypeString, value)
	}
	if _u.mutation.ModuleCleared() {
		_spec.ClearField(apiresource.FieldModule, field.TypeString)
	}
	if value, ok := _u.mutation.ModuleDescription(); ok {
		_spec.SetField(apiresource.FieldModuleDescription, field.TypeString, value)
	}
	if _u.mutation.ModuleDescriptionCleared() {
		_spec.ClearField(apiresource.FieldModuleDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Operation(); ok {
		_spec.SetField(apiresource.FieldOperation, field.TypeString, value)
	}
	if _u.mutation.OperationCleared() {
		_spec.ClearField(apiresource.FieldOperation, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(apiresource.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(apiresource.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(apiresource.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(apiresource.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(apiresource.FieldScope, field.TypeEnum, value)
	}
	if _u.mutation.ScopeCleared() {
		_spec.ClearField(apiresource.FieldScope, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &ApiResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
