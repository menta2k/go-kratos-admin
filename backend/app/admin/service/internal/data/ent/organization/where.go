// Code generated by ent, DO NOT EDIT.

package organization

import (
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeleteTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdateBy, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldRemark, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldParentID, v))
}

// SortID applies equality check predicate on the "sort_id" field. It's identical to SortIDEQ.
func SortID(v int32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSortID, v))
}

// CreditCode applies equality check predicate on the "credit_code" field. It's identical to CreditCodeEQ.
func CreditCode(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreditCode, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAddress, v))
}

// BusinessScope applies equality check predicate on the "business_scope" field. It's identical to BusinessScopeEQ.
func BusinessScope(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldBusinessScope, v))
}

// IsLegalEntity applies equality check predicate on the "is_legal_entity" field. It's identical to IsLegalEntityEQ.
func IsLegalEntity(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldIsLegalEntity, v))
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldManagerID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldUpdateTime))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDeleteTime))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldCreateBy))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldUpdateBy))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldRemark, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldTenantID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldName, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldParentID))
}

// SortIDEQ applies the EQ predicate on the "sort_id" field.
func SortIDEQ(v int32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSortID, v))
}

// SortIDNEQ applies the NEQ predicate on the "sort_id" field.
func SortIDNEQ(v int32) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldSortID, v))
}

// SortIDIn applies the In predicate on the "sort_id" field.
func SortIDIn(vs ...int32) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldSortID, vs...))
}

// SortIDNotIn applies the NotIn predicate on the "sort_id" field.
func SortIDNotIn(vs ...int32) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldSortID, vs...))
}

// SortIDGT applies the GT predicate on the "sort_id" field.
func SortIDGT(v int32) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldSortID, v))
}

// SortIDGTE applies the GTE predicate on the "sort_id" field.
func SortIDGTE(v int32) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldSortID, v))
}

// SortIDLT applies the LT predicate on the "sort_id" field.
func SortIDLT(v int32) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldSortID, v))
}

// SortIDLTE applies the LTE predicate on the "sort_id" field.
func SortIDLTE(v int32) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldSortID, v))
}

// SortIDIsNil applies the IsNil predicate on the "sort_id" field.
func SortIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldSortID))
}

// SortIDNotNil applies the NotNil predicate on the "sort_id" field.
func SortIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldSortID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldStatus))
}

// OrganizationTypeEQ applies the EQ predicate on the "organization_type" field.
func OrganizationTypeEQ(v OrganizationType) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldOrganizationType, v))
}

// OrganizationTypeNEQ applies the NEQ predicate on the "organization_type" field.
func OrganizationTypeNEQ(v OrganizationType) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldOrganizationType, v))
}

// OrganizationTypeIn applies the In predicate on the "organization_type" field.
func OrganizationTypeIn(vs ...OrganizationType) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldOrganizationType, vs...))
}

// OrganizationTypeNotIn applies the NotIn predicate on the "organization_type" field.
func OrganizationTypeNotIn(vs ...OrganizationType) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldOrganizationType, vs...))
}

// OrganizationTypeIsNil applies the IsNil predicate on the "organization_type" field.
func OrganizationTypeIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldOrganizationType))
}

// OrganizationTypeNotNil applies the NotNil predicate on the "organization_type" field.
func OrganizationTypeNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldOrganizationType))
}

// CreditCodeEQ applies the EQ predicate on the "credit_code" field.
func CreditCodeEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreditCode, v))
}

// CreditCodeNEQ applies the NEQ predicate on the "credit_code" field.
func CreditCodeNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCreditCode, v))
}

// CreditCodeIn applies the In predicate on the "credit_code" field.
func CreditCodeIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCreditCode, vs...))
}

// CreditCodeNotIn applies the NotIn predicate on the "credit_code" field.
func CreditCodeNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCreditCode, vs...))
}

// CreditCodeGT applies the GT predicate on the "credit_code" field.
func CreditCodeGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCreditCode, v))
}

// CreditCodeGTE applies the GTE predicate on the "credit_code" field.
func CreditCodeGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCreditCode, v))
}

// CreditCodeLT applies the LT predicate on the "credit_code" field.
func CreditCodeLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCreditCode, v))
}

// CreditCodeLTE applies the LTE predicate on the "credit_code" field.
func CreditCodeLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCreditCode, v))
}

// CreditCodeContains applies the Contains predicate on the "credit_code" field.
func CreditCodeContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldCreditCode, v))
}

// CreditCodeHasPrefix applies the HasPrefix predicate on the "credit_code" field.
func CreditCodeHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldCreditCode, v))
}

// CreditCodeHasSuffix applies the HasSuffix predicate on the "credit_code" field.
func CreditCodeHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldCreditCode, v))
}

// CreditCodeIsNil applies the IsNil predicate on the "credit_code" field.
func CreditCodeIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldCreditCode))
}

// CreditCodeNotNil applies the NotNil predicate on the "credit_code" field.
func CreditCodeNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldCreditCode))
}

// CreditCodeEqualFold applies the EqualFold predicate on the "credit_code" field.
func CreditCodeEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldCreditCode, v))
}

// CreditCodeContainsFold applies the ContainsFold predicate on the "credit_code" field.
func CreditCodeContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldCreditCode, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldAddress, v))
}

// BusinessScopeEQ applies the EQ predicate on the "business_scope" field.
func BusinessScopeEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldBusinessScope, v))
}

// BusinessScopeNEQ applies the NEQ predicate on the "business_scope" field.
func BusinessScopeNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldBusinessScope, v))
}

// BusinessScopeIn applies the In predicate on the "business_scope" field.
func BusinessScopeIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldBusinessScope, vs...))
}

// BusinessScopeNotIn applies the NotIn predicate on the "business_scope" field.
func BusinessScopeNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldBusinessScope, vs...))
}

// BusinessScopeGT applies the GT predicate on the "business_scope" field.
func BusinessScopeGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldBusinessScope, v))
}

// BusinessScopeGTE applies the GTE predicate on the "business_scope" field.
func BusinessScopeGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldBusinessScope, v))
}

// BusinessScopeLT applies the LT predicate on the "business_scope" field.
func BusinessScopeLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldBusinessScope, v))
}

// BusinessScopeLTE applies the LTE predicate on the "business_scope" field.
func BusinessScopeLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldBusinessScope, v))
}

// BusinessScopeContains applies the Contains predicate on the "business_scope" field.
func BusinessScopeContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldBusinessScope, v))
}

// BusinessScopeHasPrefix applies the HasPrefix predicate on the "business_scope" field.
func BusinessScopeHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldBusinessScope, v))
}

// BusinessScopeHasSuffix applies the HasSuffix predicate on the "business_scope" field.
func BusinessScopeHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldBusinessScope, v))
}

// BusinessScopeIsNil applies the IsNil predicate on the "business_scope" field.
func BusinessScopeIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldBusinessScope))
}

// BusinessScopeNotNil applies the NotNil predicate on the "business_scope" field.
func BusinessScopeNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldBusinessScope))
}

// BusinessScopeEqualFold applies the EqualFold predicate on the "business_scope" field.
func BusinessScopeEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldBusinessScope, v))
}

// BusinessScopeContainsFold applies the ContainsFold predicate on the "business_scope" field.
func BusinessScopeContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldBusinessScope, v))
}

// IsLegalEntityEQ applies the EQ predicate on the "is_legal_entity" field.
func IsLegalEntityEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldIsLegalEntity, v))
}

// IsLegalEntityNEQ applies the NEQ predicate on the "is_legal_entity" field.
func IsLegalEntityNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldIsLegalEntity, v))
}

// IsLegalEntityIsNil applies the IsNil predicate on the "is_legal_entity" field.
func IsLegalEntityIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldIsLegalEntity))
}

// IsLegalEntityNotNil applies the NotNil predicate on the "is_legal_entity" field.
func IsLegalEntityNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldIsLegalEntity))
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldManagerID, v))
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldManagerID, v))
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldManagerID, vs...))
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...uint32) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldManagerID, vs...))
}

// ManagerIDGT applies the GT predicate on the "manager_id" field.
func ManagerIDGT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldManagerID, v))
}

// ManagerIDGTE applies the GTE predicate on the "manager_id" field.
func ManagerIDGTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldManagerID, v))
}

// ManagerIDLT applies the LT predicate on the "manager_id" field.
func ManagerIDLT(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldManagerID, v))
}

// ManagerIDLTE applies the LTE predicate on the "manager_id" field.
func ManagerIDLTE(v uint32) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldManagerID, v))
}

// ManagerIDIsNil applies the IsNil predicate on the "manager_id" field.
func ManagerIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldManagerID))
}

// ManagerIDNotNil applies the NotNil predicate on the "manager_id" field.
func ManagerIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldManagerID))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Organization) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Organization) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.NotPredicates(p))
}
