// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/roleapi"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleApiUpdate is the builder for updating RoleApi entities.
type RoleApiUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleApiMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleApiUpdate builder.
func (_u *RoleApiUpdate) Where(ps ...predicate.RoleApi) *RoleApiUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *RoleApiUpdate) SetUpdateTime(v time.Time) *RoleApiUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *RoleApiUpdate) SetNillableUpdateTime(v *time.Time) *RoleApiUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *RoleApiUpdate) ClearUpdateTime() *RoleApiUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *RoleApiUpdate) SetDeleteTime(v time.Time) *RoleApiUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *RoleApiUpdate) SetNillableDeleteTime(v *time.Time) *RoleApiUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *RoleApiUpdate) ClearDeleteTime() *RoleApiUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *RoleApiUpdate) SetCreateBy(v uint32) *RoleApiUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *RoleApiUpdate) SetNillableCreateBy(v *uint32) *RoleApiUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *RoleApiUpdate) AddCreateBy(v int32) *RoleApiUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *RoleApiUpdate) ClearCreateBy() *RoleApiUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RoleApiUpdate) SetRoleID(v uint32) *RoleApiUpdate {
	_u.mutation.ResetRoleID()
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RoleApiUpdate) SetNillableRoleID(v *uint32) *RoleApiUpdate {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// AddRoleID adds value to the "role_id" field.
func (_u *RoleApiUpdate) AddRoleID(v int32) *RoleApiUpdate {
	_u.mutation.AddRoleID(v)
	return _u
}

// SetAPIID sets the "api_id" field.
func (_u *RoleApiUpdate) SetAPIID(v uint32) *RoleApiUpdate {
	_u.mutation.ResetAPIID()
	_u.mutation.SetAPIID(v)
	return _u
}

// SetNillableAPIID sets the "api_id" field if the given value is not nil.
func (_u *RoleApiUpdate) SetNillableAPIID(v *uint32) *RoleApiUpdate {
	if v != nil {
		_u.SetAPIID(*v)
	}
	return _u
}

// AddAPIID adds value to the "api_id" field.
func (_u *RoleApiUpdate) AddAPIID(v int32) *RoleApiUpdate {
	_u.mutation.AddAPIID(v)
	return _u
}

// Mutation returns the RoleApiMutation object of the builder.
func (_u *RoleApiUpdate) Mutation() *RoleApiMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleApiUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleApiUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleApiUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleApiUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleApiUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleApiUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleApiUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(roleapi.Table, roleapi.Columns, sqlgraph.NewFieldSpec(roleapi.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(roleapi.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(roleapi.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(roleapi.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(roleapi.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(roleapi.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(roleapi.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(roleapi.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(roleapi.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(roleapi.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRoleID(); ok {
		_spec.AddField(roleapi.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.APIID(); ok {
		_spec.SetField(roleapi.FieldAPIID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedAPIID(); ok {
		_spec.AddField(roleapi.FieldAPIID, field.TypeUint32, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roleapi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleApiUpdateOne is the builder for updating a single RoleApi entity.
type RoleApiUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleApiMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *RoleApiUpdateOne) SetUpdateTime(v time.Time) *RoleApiUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *RoleApiUpdateOne) SetNillableUpdateTime(v *time.Time) *RoleApiUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *RoleApiUpdateOne) ClearUpdateTime() *RoleApiUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *RoleApiUpdateOne) SetDeleteTime(v time.Time) *RoleApiUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *RoleApiUpdateOne) SetNillableDeleteTime(v *time.Time) *RoleApiUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *RoleApiUpdateOne) ClearDeleteTime() *RoleApiUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *RoleApiUpdateOne) SetCreateBy(v uint32) *RoleApiUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *RoleApiUpdateOne) SetNillableCreateBy(v *uint32) *RoleApiUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *RoleApiUpdateOne) AddCreateBy(v int32) *RoleApiUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *RoleApiUpdateOne) ClearCreateBy() *RoleApiUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RoleApiUpdateOne) SetRoleID(v uint32) *RoleApiUpdateOne {
	_u.mutation.ResetRoleID()
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RoleApiUpdateOne) SetNillableRoleID(v *uint32) *RoleApiUpdateOne {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// AddRoleID adds value to the "role_id" field.
func (_u *RoleApiUpdateOne) AddRoleID(v int32) *RoleApiUpdateOne {
	_u.mutation.AddRoleID(v)
	return _u
}

// SetAPIID sets the "api_id" field.
func (_u *RoleApiUpdateOne) SetAPIID(v uint32) *RoleApiUpdateOne {
	_u.mutation.ResetAPIID()
	_u.mutation.SetAPIID(v)
	return _u
}

// SetNillableAPIID sets the "api_id" field if the given value is not nil.
func (_u *RoleApiUpdateOne) SetNillableAPIID(v *uint32) *RoleApiUpdateOne {
	if v != nil {
		_u.SetAPIID(*v)
	}
	return _u
}

// AddAPIID adds value to the "api_id" field.
func (_u *RoleApiUpdateOne) AddAPIID(v int32) *RoleApiUpdateOne {
	_u.mutation.AddAPIID(v)
	return _u
}

// Mutation returns the RoleApiMutation object of the builder.
func (_u *RoleApiUpdateOne) Mutation() *RoleApiMutation {
	return _u.mutation
}

// Where appends a list predicates to the RoleApiUpdate builder.
func (_u *RoleApiUpdateOne) Where(ps ...predicate.RoleApi) *RoleApiUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleApiUpdateOne) Select(field string, fields ...string) *RoleApiUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RoleApi entity.
func (_u *RoleApiUpdateOne) Save(ctx context.Context) (*RoleApi, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleApiUpdateOne) SaveX(ctx context.Context) *RoleApi {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleApiUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleApiUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleApiUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleApiUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleApiUpdateOne) sqlSave(ctx context.Context) (_node *RoleApi, err error) {
	_spec := sqlgraph.NewUpdateSpec(roleapi.Table, roleapi.Columns, sqlgraph.NewFieldSpec(roleapi.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleApi.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roleapi.FieldID)
		for _, f := range fields {
			if !roleapi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roleapi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(roleapi.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(roleapi.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(roleapi.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(roleapi.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(roleapi.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(roleapi.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(roleapi.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(roleapi.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(roleapi.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRoleID(); ok {
		_spec.AddField(roleapi.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.APIID(); ok {
		_spec.SetField(roleapi.FieldAPIID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedAPIID(); ok {
		_spec.AddField(roleapi.FieldAPIID, field.TypeUint32, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &RoleApi{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roleapi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
